@echo off
echo üîç DIAGN√ìSTICO DE CONECTIVIDADE API
echo ==================================

REM Verificar vari√°veis de ambiente
echo üìã Verificando configura√ß√£o...
if exist .env.local (
    echo ‚úÖ Arquivo .env.local encontrado:
    findstr BASE_API .env.local
) else (
    echo ‚ùå Arquivo .env.local n√£o encontrado!
)

echo.
echo üåê Testando conectividade...

REM Testar APIs (usando PowerShell dentro do batch)
powershell -Command "try { $response = Invoke-WebRequest -Uri 'https://adote-pet-web.herokuapp.com/api/' -TimeoutSec 5 -UseBasicParsing; Write-Host '‚úÖ https://adote-pet-web.herokuapp.com/api/ - OK' } catch { Write-Host '‚ùå https://adote-pet-web.herokuapp.com/api/ - FALHA' }"

powershell -Command "try { $response = Invoke-WebRequest -Uri 'https://adote-um-pet-multistack.herokuapp.com/api' -TimeoutSec 5 -UseBasicParsing; Write-Host '‚úÖ https://adote-um-pet-multistack.herokuapp.com/api - OK' } catch { Write-Host '‚ùå https://adote-um-pet-multistack.herokuapp.com/api - FALHA' }"

powershell -Command "try { $response = Invoke-WebRequest -Uri 'http://localhost:8080/api' -TimeoutSec 2 -UseBasicParsing; Write-Host '‚úÖ http://localhost:8080/api - OK (Backend local rodando)' } catch { Write-Host '‚ùå http://localhost:8080/api - FALHA (Backend local n√£o est√° rodando)' }"

powershell -Command "try { $response = Invoke-WebRequest -Uri 'http://localhost:3001' -TimeoutSec 2 -UseBasicParsing; Write-Host '‚úÖ http://localhost:3001 - OK (Servidor mock rodando)' } catch { Write-Host '‚ùå http://localhost:3001 - FALHA (Servidor mock n√£o est√° rodando)' }"

echo.
echo üõ†Ô∏è  RECOMENDA√á√ïES:
echo 1. Se todas as APIs externas falharam, use: npm run mock
echo 2. Configure .env.local com BASE_API=http://localhost:3001  
echo 3. Para backend Java local, use BASE_API=http://localhost:8080/api
echo 4. Reinicie o servidor Next.js ap√≥s alterar .env.local

pause